import unittest
import numpy as np
import math
from causalai.models.common.CI_tests.kernels import KernelBase, LinearKernel, GaussianKernel


class TestKernels(unittest.TestCase):
    def test_kernels(self):
        
        # test when a single data array is provided
        k = np.array([[ 6.48999891, -0.88576768, -0.47682983, -1.677099  ],
                     [-0.88576768,  6.27466186,  2.92334537,  0.84697395],
                     [-0.47682983,  2.92334537,  1.94713353, -0.1555163 ],
                     [-1.677099,    0.84697395, -0.1555163,   1.12616564]])
        k1 = np.array([[ 4.36594409, -3.27975693, -0.94150102, -1.43523118],
                        [-3.27975693,  3.15817673,  0.5848329 ,  1.50239305],
                        [-0.94150102,  0.5848329 ,  1.88437074, -0.09164935],
                        [-1.43523118,  1.50239305, -0.09164935,  1.51367565]])
        KernelBase_ = KernelBase()
        ck = KernelBase_.centered_kernel(k)
        
        ck_gt = [[ 5.82660852, -2.97638585, -1.33717781, -1.51304486],
                 [-2.97638585,  2.75681592,  0.63576962, -0.41619969],
                 [-1.33717781,  0.63576962,  0.88982795, -0.18841975],
                 [-1.51304486, -0.41619969, -0.18841975,  2.1176643 ]]
        self.assertTrue(np.allclose(ck, ck_gt, atol=1e-8))
        kmr = KernelBase.kernel_matrix_regression(k, k1)
        
        kmr_gt = np.array([[ 1.57383160e-09,  2.11108252e-09,  2.72900489e-10, -6.53648283e-10],
                         [ 2.11108252e-09,  2.87672050e-09,  3.87389436e-10, -9.11236792e-10],
                         [ 2.72900489e-10,  3.87389436e-10,  6.23661372e-11, -1.32594840e-10],
                         [-6.53648283e-10, -9.11236792e-10, -1.32594840e-10,  3.42020424e-10]])
        self.assertTrue(np.allclose(kmr, kmr_gt, atol=1e-10))
        
        X = np.array([[ 0.32118435,  0.24632351,  0.18580046, -0.49248743],
                       [ 0.1261842 , -1.09405781,  1.34166156,  0.28450751],
                       [-0.3297756 , -0.00683041, -0.53610697, -0.62660554],
                       [-0.99682585, -1.29032444,  0.51508314,  1.33550039],
                       [ 0.18317443,  0.8108811 ,  0.39203752,  1.28463737],
                       [ 0.06074998, -0.90572115,  0.46685134, -1.45520494]])
        Y = np.array([[ 0.09521009, -0.64929447,  1.36333796, -0.88747197],
                       [ 1.13645778, -0.55808073,  0.5094378 , -0.18300878],
                       [ 0.42343799,  2.5027752 , -0.16240909,  0.18788175],
                       [ 2.46414507,  1.0832293 , -0.81685447, -0.92580902],
                       [ 0.3370955 , -0.07987303, -0.7060577 ,  0.53899422],
                       [ 1.05601143,  0.51415865,  1.51646719,  0.72318958]])
        LinearKernel_ = LinearKernel()
        k = LinearKernel_.kernel(X, Y)
        k_gt = np.array([[-0.83336969, -0.53992292,  0.98905797,  1.72720979, -0.72699768, -0.61597746],
                       [ 1.4546689 ,  0.98318538, -1.9398905 , -1.31872411, -0.53294558, 1.3537059 ],
                       [-0.68661398, -0.57211327,  1.08141539,  1.47232733,  0.4207462 , -1.71576167],
                       [ 0.86971894,  0.65720282, -1.12075109, -3.14224042,  1.70842989, 1.02763985],
                       [-2.54371732, -1.2666645 ,  2.60930867,  0.15026888, -0.04103433, 1.0918386 ],
                       [ 1.73931315,  0.73831249, -1.61914045,  1.11115853, -0.82819849, -1.14144523]])
        self.assertTrue(np.allclose(k, k_gt, atol=1e-10))
        
        GaussianKernel_ = GaussianKernel()
        k = GaussianKernel_.kernel(X, Y)
        k_gt = np.array([[-5.35638850e-03,  6.60979942e-03, -5.93634313e-04, -5.93487212e-04, 6.08188324e-04, -6.74477725e-04,],
                         [ 1.96216234e-03, -7.37643079e-04, -5.09026981e-05, -5.07379927e-05, -9.95708046e-04, -1.27170525e-04,],
                         [-4.52192525e-03, -8.52300049e-04,  7.99589252e-04,  7.99753919e-04, 3.06188456e-03,  7.12997562e-04,],
                         [-3.98736200e-03, -3.24433260e-04,  1.33575857e-03,  1.33592327e-03, 3.90946512e-04,  1.24916691e-03,],
                         [-4.12432053e-03, -4.61200687e-04,  1.19977073e-03,  1.19896485e-03, 5.70128656e-04,  1.61665698e-03,],
                         [ 1.60278339e-02, -4.23422235e-03, -2.69058154e-03, -2.69041684e-03, -3.63544001e-03, -2.77717320e-03]])
        self.assertTrue(np.allclose(k, k_gt, atol=1e-10))

# if __name__ == "__main__":
#     unittest.main()